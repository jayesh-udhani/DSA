import java.io.*;
import java.util.*;

public class dijkstra {
/* Input : n (number of vertices), number of edges e and source vertex s
 * Vertices are numbered from 0 to n-1
 * edges are given in the form of 2D array i.e. int[][] edges=new int[][3] with 
 * There exists an edge between vertices edges[i][0] and edges[i][1] with weight edges[i][2]
 */
	static int n;
	class Pair
	{
		int x,y;
		Pair(int x,int y)
		{
			this.x=x;
			this.y=y;
		}
	}
	public class heapNMap
	{
		Map<Integer,Integer> hm;
		Pair[] a;
		int size;
		public heapNMap()
		{
			hm=new HashMap<>();
			a=new Pair[n];
			size=0;
		}
		public void add(int vertex,int dist)
		{
			a[size]=new Pair(vertex,dist);
			hm.put(vertex, size);
			int i=size,p;
			while(i>0 && a[i].y<a[(i-1)/2].y)
			{
				hm.put(a[i].x, (i-1)/2);
				hm.put(a[(i-1)/2].x, i);
				Pair t=a[i];
				a[i]=new Pair(a[(i-1)/2].x,a[(i-1)/2].y);
				a[(i-1)/2]=t;
				i=(i-1)/2;
			}
			size++;
		}
		public boolean contains(int vertex)
		{
			return hm.containsKey(vertex);
		}
		public Pair extractMin()
		{
			
		}
		public void decreaseKey(int vertex,int dist)
		{
			if(!hm.containsKey(vertex))
				return;
			int index=hm.get(vertex);
			if(a[index].y<=dist)
				return;
			
		}
	}
	public static void main(String[] args) {
		Scanner in=new Scanner(System.in);
		n=in.nextInt();
		int i,e=in.nextInt(),s=in.nextInt();
		int[][] edges=new int[e][3];
		for(i=0;i<n;i++)
		{
			edges[i][0]=in.nextInt();
			edges[i][1]=in.nextInt();
			edges[i][2]=in.nextInt();
		}
		
		in.close();
	}

}
